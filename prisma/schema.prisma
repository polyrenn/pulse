// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

enum GroupRole {
  ADMIN
  MODERATOR
  MEMBER
}

enum ActivityType {
  fileUpload
  commentAdded
  reactionAdded
}

enum GroupType {
  general
  event
}

model User {
  id        String    @id @db.Uuid @default(uuid())
  email     String    @unique
  username  String?
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  clerkId   String?
  groups    Group[]
  groupMembers GroupMembers[]
  activity  Activity[]
}

model Group {
  id          String      @id @db.Uuid @default(uuid())
  name        String
  description String?
  inviteCode  String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  groupType   GroupType @default(general)
  members     User[]
  groupMembers GroupMembers[]    
  activity    Activity[]
}

model GroupMembers {
  userId     String @db.Uuid
  groupId    String @db.Uuid
  role       String @default("member")
  joinedAt   DateTime @default(now())
  user       User   @relation(fields: [userId], references: [id])
  group      Group  @relation(fields: [groupId], references: [id])
  
  @@id([userId, groupId]) // Composite ID for many-to-many relationship
}

model File {
  id          String      @id @db.Uuid @default(uuid())
  groupId     String      @db.Uuid
  userId      String      @db.Uuid
  fileName    String
  filePath    String
  fileType    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  comments    Comment[]
  reactions   Reaction[]
  activity    Activity[]
}


model Comment {
  id        String      @id @db.Uuid @default(uuid())
  fileId    String      @db.Uuid
  userId    String      @db.Uuid
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  file      File    @relation(fields: [fileId], references: [id])
  activity  Activity[]
}


model Reaction {
  id        String      @id @db.Uuid @default(uuid())
  userId    String      @db.Uuid
  commentId String?    @db.Uuid
  fileId    String    @db.Uuid
  reaction  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  file      File     @relation(fields: [fileId], references: [id])
}




model Activity {
  id        String      @id @db.Uuid @default(uuid())
  groupId   String      @db.Uuid
  userId    String      @db.Uuid
  type      ActivityType
  details   String?
  fileId    String?     @db.Uuid
  commentId String?     @db.Uuid
  createdAt DateTime @default(now())
  group     Group     @relation(fields: [groupId], references: [id])
  user      User      @relation(fields: [userId], references: [id])
  file      File?     @relation(fields: [fileId], references: [id])
  comment   Comment?  @relation(fields: [commentId], references: [id])
}

