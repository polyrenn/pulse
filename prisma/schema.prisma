// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

model User {
  id             String          @id @default(cuid())
  email          String          @unique
  name           String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  events         Event[]         @relation("EventCreator")
  participations EventUser[]
  files          File[]
  expenses       Expense[]
  expenseShares  ExpenseShare[]
  groupsMember   GroupUser[]     // Groups the user is a member of
  groupsOwned    Group[]         // Groups created/owned by the user
}

model Group {
  id          String      @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  owner       User        @relation(fields: [ownerId], references: [id])
  ownerId     String
  members     GroupUser[]
  events      Event[]
  isPrivate   Boolean     @default(false)
}

model GroupUser {
  id        String   @id @default(cuid())
  group     Group    @relation(fields: [groupId], references: [id])
  groupId   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  role      GroupRole @default(MEMBER)
  joinedAt  DateTime @default(now())

  @@unique([groupId, userId])
}

enum GroupRole {
  ADMIN
  MODERATOR
  MEMBER
}

model Event {
  id          String      @id @default(cuid())
  title       String
  description String?
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  creator     User        @relation("EventCreator", fields: [creatorId], references: [id])
  creatorId   String
  group       Group?      @relation(fields: [groupId], references: [id])
  groupId     String?
  participants EventUser[]
  files       File[]
  expenses    Expense[]
}

model EventUser {
  id        String   @id @default(cuid())
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  joinedAt  DateTime @default(now())

  @@unique([eventId, userId])
}

model File {
  id        String   @id @default(cuid())
  name      String
  url       String
  type      String   // e.g., "document", "image", etc.
  size      Int
  uploadedAt DateTime @default(now())
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   String
  uploader  User     @relation(fields: [uploaderId], references: [id])
  uploaderId String
}

model Expense {
  id          String         @id @default(cuid())
  description String
  amount      Decimal
  date        DateTime       @default(now())
  event       Event          @relation(fields: [eventId], references: [id])
  eventId     String
  paidBy      User           @relation(fields: [paidById], references: [id])
  paidById    String
  shares      ExpenseShare[]
  receiptUrl  String?
}

model ExpenseShare {
  id         String   @id @default(cuid())
  expense    Expense  @relation(fields: [expenseId], references: [id])
  expenseId  String
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  amount     Decimal
  isPaid     Boolean  @default(false)
  paidAt     DateTime?

  @@unique([expenseId, userId])
}